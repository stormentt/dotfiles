function join_by {
  local IFS="$1"
    shift
    echo "$*"
}

function atno {
  TIME=$1
    SUMMARY=$2
    BODY=$3

    echo "notify-send -u critical \"$SUMMARY\" \"$BODY\"" | at $TIME
}

function all_oom {
  while read -r pid comm; do
    printf '%d\t%d\t%s\n' "$pid" "$(cat /proc/$pid/oom_score)" "$comm"
      done < <(ps -e -o pid= -o comm=)
}

function sshdiff {
    local file=$1
    local s1=$2
    local s2=$3

    diff -y <(ssh op@$s1 sudo cat $file) <(ssh op@$s2 sudo cat $file)
}

function mssh {
  local cmd="$1"
    shift

    for server in "$@"; do
      echo
        echo -e "${GREEN}===== $server =====${NC}"
        ssh $server "$cmd"
        echo -e "${RED}===== $server =====${NC}"
        echo
        done
}

function curlex {
  local url=$1
    local ext="${url##*.}"
    case $ext in
    "xz")
    local tarcmd="tar -xJ"
    ;;
  "gz")
    local tarcmd="tar -xz"
    ;;
  *)
    local tarcmd="tar -x"
    ;;
  esac

    curl "$1" | eval ${tarcmd}
}

function viclip {
  local clip=$(xclip -out)
    clip=$(echo "$clip" | vipe)

    echo "$clip" | xclip -sel c
    echo "$clip" | xclip -sel p
    echo "$clip" | xclip -sel s
}

function fclip {
  local file=$1

    if [ ! -f "$file" ]; then
      echo "$file does not exist!" 1>&2
        return 1
        fi

        cat "$file" | xclip -sel c
        cat "$file" | xclip -sel p
        cat "$file" | xclip -sel s
}

function cclip {
  echo -n "" | xclip -sel c
    echo -n "" | xclip -sel p
    echo -n "" | xclip -sel s
}

function oclip {
  echo -e "${GREEN}===== CLIPBOARD =====${NC}"
    xclip -out -sel c
    echo -e "\n${RED}===== CLIPBOARD =====${NC}"

    echo
    echo -e "${GREEN}===== PRIMARY =====${NC}"
    xclip -out -sel p
    echo -e "\n${RED}===== PRIMARY =====${NC}"

    echo
    echo -e "${GREEN}===== SECONDARY =====${NC}"
    xclip -out -sel s
    echo -e "\n${RED}===== SECONDARY =====${NC}"
}

function vijson {
  local target="$1"
  local tmpedit="$(mktemp /dev/shm/vijson.XXX)"
  cp "$target" "$tmpedit"

  local repeat=true
  while $repeat; do
    $EDITOR "$tmpedit"

    python -m json.tool "$tmpedit" 1>/dev/null
    if [ $? -ne 0 ]; then
      echo "^D to edit again, ^C to quit"
      cat
      if [ $? -ne 0 ]; then
        repeat=false;
      fi
    else
      repeat=false;
      cp "$tmpedit" "$target"
      if [ $? -eq 0 ]; then
        rm -f "$tmpedit"
      else
        echo "failed to copy $tmpedit to $target"
      fi
    fi
  done
}

function cutc {
  local epoch="$1"
  date --date "@$epoch"
  date -u --date "@$epoch"
}

function fepoch {
  date "+ 0     %s" --date "0:00 today"
  date "+ 1     %s" --date "0:00 today + 1 day"
  date "+ 3     %s" --date "0:00 today + 3 day"
  date "+ 7     %s" --date "0:00 today + 7 day"
  date "+ 14    %s" --date "0:00 today + 14 day"
  date "+ 30    %s" --date "0:00 today + 30 day"
}

function lepoch {
  date "+ 0     %s" --date "0:00 today"
  date "+-1     %s" --date "0:00 today - 1 day"
  date "+-3     %s" --date "0:00 today - 3 day"
  date "+-7     %s" --date "0:00 today - 7 day"
  date "+-14    %s" --date "0:00 today - 14 day"
  date "+-30    %s" --date "0:00 today - 30 day"
}

function epoch {
  {
    lepoch | tac
    fepoch
  } | uniq
}

dotsource ctmp
dotsource record
dotsource help

function getcron {
  local server="$1"
  if [[ -z "$server" ]]; then
    echo "must specify a server"
    return 1
  fi

  shift
  local users=($@)
  if [[ -z "$users" ]]; then
    users=(
      xmo
    )
  fi

  for user in "${users[@]}"; do
    local crons=$(ssh op@$server "sudo crontab -lu $user")
    if [[ ! -z "$crons" ]]; then
      echo "$crons" > ./$user
    fi
  done
}
